URL: https://www.youtube.com/watch?v=QKr1HPq6YlI&ab_channel=DotNetMastery

Solution Items:
TangyWeb_Server -> Blazor Server App
TangyWeb_Client -> Blazor WebAssembly App
Tangy_Models -> Class Library
Tangy_Business -> Class Library
Tangy_Common -> Class Library
Tangy_DataAccess -> Class Library

-------------------------------------------------
Στο Blazor όλα είναι components.

Στο TangyWeb_Server\Pages\_Host.cshtml
έχουμε το main component μας, το οποίο είναι type="typeof(App)"

Στο TangyWeb_Server\App.razor γίνεται πραγματικά το routing.
Μέσα έχουμε δύο components (Found/NotFound).

Κάθε .razor σελίδα μέσα στο TangyWeb_Server\Pages\
περιέχει το @page, με αυτό γίνεται defined το route.

Στο TangyWeb_Server\Pages\Index.razor βλέπουμε
το SurveyPrompt component, το οποίο βρίσκεται στο:
TangyWeb_Server\Shared\SurveyPrompt.razor

Για να φτιάξουμε ένα νέο Componet, κάνουμε right click στο φάκελο:
TangyWeb_Server\Pages\LearnBlazor -> Add Razor Component "BindProp"
και ορίζουμε το routing του ως: @page "/learnBlazor/bindProp"

και για να το προσθέσουμε στην sidebar πάμε στο:
TangyWeb_Server\Shared\NavMenu.razor

(2 way - Data Binding)
Μπορούμε μέσα σε .razor σελίδα (π.χ. TangyWeb_Server\Pages\LearnBlazor\BindProp.razor)
να γράψουμε C#. π.χ. να δημιουργήσουμε ένα νέο αντικείμενο.
Προσοχή κατά τη δημιουργία ενός αντικειμένου πρέπει να γράψουμε το full-path
της κλάσης π.χ. Tangy_Models.LearnBlazorModels.Demo_Product
Για να πετύχουμε 2 way data binding, πρέπει στα input texts
αντί για values, να βάζουμε data-binding. Τώρα όταν αλλάζουμε το πεδίο από το
input text πεδίο, αλλάζει και η τιμή του property στο αντικείμενο.

Στο TangyWeb_Server\_Imports.razor μπορούμε να βάλουμε τα references
των classes. π.χ. @using Tangy_Models.LearnBlazorModels

Ένα από τα Lifecycles στο Blazor είναι όταν ένα component γίνεται initialized.
Στο TangyWeb_Server\Pages\LearnBlazor\BindProp.razor
έχουμε το protected override void OnInitialized() που κάνουμε populate τη λίστα με τα products.

Στο TangyWeb_Server\Pages\LearnBlazor\DemoProduct.razor
αντί να γράφουμε ξανά και ξανά κώδικα για το delete & edit
θα φτιάξουμε components για να τα χρησιμοποιούμε 
σε πολλά σημεία του κώδικα (όπως είναι τα partial views στο MVC).
Αυτά λέγονται και Shared Components.

Στο TangyWeb_Server\Pages\LearnBlazor\LearnBlazorComponents\_EditDeleteButton.razor
βλέπουμε ότι δεν έχουμε routing.

Το καλούμε από άλλη .razor ως <TangyWeb_Server.Pages.LearnBlazor.LearnBlazorComponents._EditDeleteButton/>
Μπορούμε να περάσουμε και παραμέτρους
π.χ. <_EditDeleteButton IsActive="@prod.IsActive">
και στο Shared Component πρέπει να το έχουμε ορίσει 
[Parameter]
public bool IsActive { get; set; }

Θέλουμε μέσα από το TangyWeb_Server\Pages\LearnBlazor\LearnBlazorComponents\IndividualProduct.razor
να καλέσουμε μια μέθοδο (FavouriteCountUpdate)
του TangyWeb_Server\Pages\LearnBlazor\DemoProduct.razor
αυτό θα το κάνουμε με Event Callback

Παιρνάμε και τη μέθοδο ως παράμετρο μαζί με το product.
δηλαδή: product="prod" OnFavouriteUpdated="FavouriteCountUpdate"
και μετά στο child component
[Parameter]
public EventCallback<bool> OnFavouriteUpdated { get; set; }

private async Task FavouriteUpdated(ChangeEventArgs e)
{
    await OnFavouriteSelection.InvokeAsync((bool)e.Value);            
}

Μπορούμε από το Parent Component να περάσουμε τιμές στο Child
όταν το καλούμε ανάμεσα στα html tags.
<_ChildComponent>This is Render Fragment From Parent!</_ChildComponent>
Αυτό λέγεται render fragment. Και μπορούμε να ορίσουμε πολλά RF σε ένα component.

Έστω ότι έχουμε 3 διαδοχικά components (Parent, _Child, _GrandChild)
αν θέλουμε να περάσουμε παράμετρο από το Parent στο _GrandChild,
θα έπρεπε να την περάσουμε και στο _Child και στη συνέχεια
αυτό να το περάσει στο _GrandChild.

Αυτό μπορεί να λυθεί (να περάσουμε παράμετρο κατευθείαν μόνο στο _GrandChild)
με CascadingParameter.

Ένα component μπορεί να έχει πολλά routes π.χ.:
@page "/learnBlazor/learnRouting"
@page "/learnRouting"

Επίσης, μπορούμε να περάσουμε και παραμέτρους. π.χ.:
@page "/learnBlazor/learnRouting/{parameter1}/{parameter2}"

Μπρούμε να κάνουμε parse query string parameters (learnRouting?Param1=Tangy&Param2=Blazor)
με το @inject NavigationManager

Μπορούμε να εισάγουμε JavaScript κώδικα με το @inject IJSRuntime _JsRuntime

Από το ParentComponent μπορούμε να φτιάξουμε ένα reference του
_ChildComponent και να έχουμε πρόσβαση σε όλες τις public μεθόδους. 
private _ChildComponent childComp;
<_ChildComponent @ref="childComp" ...>

Έχουμε 5 Life cycles στο Blazor:
1) OnInitialized(Async) - εκτελείται όταν ένα component έχει φορτωθεί τελείως.
2) OnParametersSet(Async) - όταν ένα componet αρχικοποιείται και κάθε φορά
που μία νέα ή ενημερωμένη παράμετρος λαμβάνεται στο render tree
3) OnAfterRender(Async) - καλείται μετά το render ενός component
4) ShouldRender - επιστρέφει Boolean. αν είναι true κάνει refresh το UI. 
αλλιώς οι αλλαγές δεν παιρνάνε στο UI.
5) StateHasChanged() - αυτή η μέθοδος ειδοποιεί το component πως
η κατάσταση του έχει αλλάξει.

Entity Framework Core - Code First

PM CONSOLE (Tangy_DataAccess):
add-migration AddCategoryToDatabase
update-database

-------------------------------------------------
Blazor WebAssembly App vs Blazor Server App

Στο Blazor WebAssembly App δεν έχουμε appsettings.json
Συνήθως σε αυτά τα projects κάνουμε comsume APIs.

Τα App.razor είναι ίδια.

Στα Blazor Server App το Program.cs είναι πολύ διαφορετικό από του 
WebAssembly. Στο πρώτο πρέπει να κάνουμε add τα services στο container.
Να κάνουμε config το pipeline. Καθώς και να κάνουμε build το application.

Στο Blazor WebAssembly App, κάνουμε create το default application.
By default, είναι ορισμένο ένα service, το HttpClient service.

Επίσης, πρέπει να ορίσουμε το Root Component, το #app 
(όπως στην Vue.js κ.α.) στο builder.

Το #app βρίσκεται στο TangyWeb_Client\wwwroot\index.html
Μέχρι να φορτώσει το #app βλέπουμε loading...
-------------------------------------------------